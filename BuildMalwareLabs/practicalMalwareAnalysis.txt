PRACTICAL MALWARE ANALYSIS
Copyright 2012 by Michael Sikorski and Andrew Honig
No Starch Press
===================================================
PART 1: BASIC ANALYSIS

	Static analysis describes the process of analyzing the code or structure of a program to determine its function. 
	The program is not run at this time.

STATIC ANALYSIS GOALS:

	Extract info from executables (i.e. strings, functions, headers, DLLs).
	Use AV tools to confirm malicious signatures.
	Using hashes to identify malware.

ANTIVIRUS SCANNING

	Identify known file signatures (suspicious code)
	Identify known heuristics (behavioral patterns)
	
HASHING

	Common method to identify malware.
	Hashing programs use algorithms to produce unique hashes like a fingerprint.
	MD5, SHA-1, SHA-256

FINDING STRINGS

	A string is a sequence of characters.
	ASCII, Unicode > end with null terminator "00"
	URLs,DLLs, 
	False outputs due to the way strings searches for null terminator.

PACKED AND OBFUSCATED MALWARE

	Obfuscated programs have been attempted to be hidden during execution.
	Packed programs are compressed, cannot be analyzed in their current state.
	Legitimate software programs will contain many strings.
	Packed or obfuscated software will contain few strings.
	Load Library & GetProcAddress common in obfuscated and/or packed malware.


	PACKING FILES

	When ran...
		> small wrapper program decompresses packed file
		> unpacked file is ran
	Static analysis of packed program can only dissect wrapper.
	

	DETECTING PACKERS WITH PEiD

	Detect type of packer.
	Detect type of compiler used to build an application.	
	UPX packing program `upx -d PackedProgram.exe`
	Note: some PEiD plugins may execute malware without warning!
	Note: Use latest version of PEiD, previous versions vuln to buffer overflow.


	Portable Executable File Format

	Format of a file reveals a lot about a file's functionality.
	PE fmt used by Windows executables, object code, and DLLs.
	PE file fmt data structure for WinOS loader to manage wrapped executable code
	^ Exception: Legacy formats
	PE files begin with header information that includes...
		> code information
		> type of application
		> required library functions
		> space requirements

LINKED LIBRARIES AND FUNCTIONS
	IMPORTS are functions used by one program that are actually stored in another program such as code libraries that contain functionality common to many programs. Code libraries can be connected to the main executable by LINKING.

	STATIC, RUNTIME, AND DYNAMIC LINKING
	STATIC LINKING 
		> least common library linking methods 
		> UNIX/Linux Common
	RUNTIME LINKING 
		> common method in malware, esp. obfuscated/packed
		> link libraries are connected at runtime
		> LoadLibrary, GetProcAddress
			-- Access any function in any library on system 
		> LdrGetProcAddress, LdrLoadDll
	DYNAMIC LINKING
		> Most common method
		> Host OS searches for necessary libraries while program loads
		> When program calls linked library function it executes within lib

	EXPLORING DYNAMICALLY LINKED FUNCTIONS WITH DEPENDENCY WALKER
	Dependency Walker: http://www.dependencywalker.com/
	Lists only dynamically linked functions in an executable.
	Common DLLs:
		> Advapi32.dll - advanced core Win components like Registry
		> Gdi32.dll    - displaying/manipulating graphics
		> WSock32.dll  - Networking DLL
		> Ws2_32.dll   - Networking DLL
		> Wininet.dll  - FTP, HTTP, NTP, -like networking protocols
	
	Note: When an new function is incompatible with a new function...
		> new function given same name as old function
		> old function named [same_name]Ex.dll (e.g. CreateWindowEx)
	Note: Functions may take parameters, will include 'A' or 'W' in name...
		> e.g. CreateDirectoryW
		> The appended letter will not appear in documentation for function
		> A - Ascii strings
		> W - Wide-character strings
	
	IMPORTED FUNCTIONS
	Identify DLL behavior by reading about Windows API functions.
	MSDN Library - Microsoft Developer Network Library API functions
	
	EXPORTED
	
===================================================
PART 2: ADVANCED STATIC ANALYSIS

PART 3: ADVANCED DYNAMIC ANALYSIS

PART 4: MALWARE FUNCTIONALITY

PART 5: ANTI-REVERSE ENGINEERING

PART 6: SPECIAL TOPICS

